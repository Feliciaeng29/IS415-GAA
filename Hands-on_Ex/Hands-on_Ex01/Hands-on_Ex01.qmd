---
title: "Hands-on Exercise 1: Geospatial Data Wrangling with R"
execute: 
  warning: false
date: "`r Sys.Date()`"
---

# Getting Started


# 1.3 Installing R and loading R packages

In this section, I will install and load tidyverse and sf packages.

`p_load` function pf **pacman** package is used to install and load sf and tidyverse packages into R

```{r}
pacman::p_load(tidyverse, sf)
```


# 1.4 Importing Geospatial Data

## 1.4.1 Importing polygon feature data in shapefile format

The code chunk below uses `st_read()` function of sf package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. When the input geospatial data is in shapefile format, 2 arguments will be used, namely: `dsn` to define the data path `layer` to provide the shapefile name

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MP14_SUBZONE_WEB_PL")

```

## 1.4.2 Importing polyline feature data in shapefile form

The code chunk below uses `st_read()` function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")

```

## 1.4.3 Importing GIS data in kml format

The `PreSchoolsLocation` is in kml format. The code chunk below will be used to import kml into R. The code chunk below, the complete path and the kml extension were provided.

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```


# 1.5 Checking the Content of A Simple Feature Data Frame

## 1.5.1 Working with st_geometry()

The column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

## 1.5.2 Working with glimpse()

Beside the basic feature information, we also would like to learn more about the assoicated attribute information in the data frame. THis is the time you will find glimpse() of dplyr.

```{r}
glimpse(mpsz)
```

## 1.5.3 Working with head()

Sometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R

```{r}
head(mpsz, n=5)
```


# 1.6 Plotting the Geospatial Data

In geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.

```{r}
plot(mpsz)
```

The default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))
```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])
```


# 1.7 Working with Projection

## 1.7.1 Assigning EPSG code to a simple feature data frame

One of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Let us check the CSR by using the code chunk below.
```{r}
st_crs(mpsz3414)
```

## 1.7.2 Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```


# 1.8 Importing and Converting An Aspatial Data

## 1.8.1 Importing the aspatial data

Since listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows list() of Base R instead of glimpse() is used to do the job.

```{r}
list(listings) 
```

## 1.8.2 Creating a simple feature data frame from an aspatial data frame

The code below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

To examine the content of the newly created simple feature data frame.
```{r}
glimpse(listings_sf)
```

Table above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.


# 1.9 Geoprocessing with sf package

Here we will learn how to perform 2 comminly used geoprocessing functions, namely beffering and point in polygon count.

## 1.9.1 Buffering

st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

## 1.9.2 Point-in-polygon count

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

The code chunk below uses st_area() of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```


# 1.10 Exploratory Data Analysis (EDA)

Firstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

The appropriate ggplot2 functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```