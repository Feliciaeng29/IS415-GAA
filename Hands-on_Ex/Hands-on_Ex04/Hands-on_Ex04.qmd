---
title: "Hands On Exercise 4: Network Constrained Spatial Point Patterns Analysis"

format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc-depth: 4
execute:
  eval: true
  echo: true
  warning: false
editor: visual
---

# 1. **The Data**

In this study, we will analyse the spatial distribution of childcare centre in [Punggol planning area](https://en.wikipedia.org/wiki/Punggol). For the purpose of this study, two geospatial data sets will be used. They are:

-   *Punggol_St*, a line features geospatial data which store the road network within Punggol Planning Area.

-   *Punggol_CC*, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.

Both data sets are in ESRI shapefile format.

# 2. **Installing and launching the R packages**

In this hands-on exercise, four R packages will be used, they are:

-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.

-   [rgdal](https://cran.r-project.org/web/packages/rgdal/), which provides bindings to the [‘Geospatial’ Data Abstraction Library (GDAL) (\>= 1.11.4)](https://gdal.org/) and access to projection/transformation operations from the [PROJ](https://proj.org/) library. In this exercise, rgdal will be used to import geospatial data in R and store as [sp](https://cran.r-project.org/web/packages/sp/vignettes/intro_sp.pdf) objects.

-   [sp](https://cran.r-project.org/web/packages/sp/), which provides classes and methods for dealing with spatial data in R. In this exercise, it will be used to manage SpatialPointsDataFrame and SpatiaLinesDataFrame, and for performing projection transformation.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

To install and launch the four R packages.

```{r}


```

```{r}
install.packages("rgdal", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

```{r}
pacman::p_load(sp, sf, rgdal, spNetwork, tmap)
```

> Own notes:
>
> -   **spNetwork** provides functions to:
>
>     -   perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network
>
>     -   build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances
>
> -   **rgdal** provides:
>
>     -   bindings to the [‘Geospatial’ Data Abstraction Library (GDAL) (\>= 1.11.4)](https://gdal.org/)
>
>     -   access to projection/transformation operations from the [PROJ](https://proj.org/) library.
>
>     -   In this exercise, rgdal will be used to import geospatial data in R and store as **sp** objects.
>
> -   **sp** provides:
>
>     -   classes and methods for dealing with spatial data in R.
>
>     -   In this exercise, it will be used to manage **SpatialPointsDataFrame** and **SpatialLinesDataFrame**, & for performing projection transformation.
>
> -   **tmap**: functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API

# 3. **Import Data and Preparation**

Read OGR vector maps into Spatial objects using `readOGR` of rgdal package:

-   network is a line feature

-   childcare is a point feature

```{r}
network <- st_read(dsn="data/geospatial", 
                   layer="Punggol_St")
```

```{r}
childcare <- st_read(dsn="data/geospatial",
                     layer="Punggol_CC")
```

# 4. **Print content of SpatialLineDataFrame & SpatialPointsDataFrame by using str function**

```{r}
str(network)
str(childcare)
```

Before delving into visualization, there is an additional prerequisite. spNetwork requires geospatial data to include comprehensive Coordinate Reference System (CRS) information. Similar to how we utilized st_transform() to set the CRS for a dataframe, we will employ spTransform() to achieve the same for our Spatial vector objects. As with our earlier geospatial data, the EPSG code for SVY21 is 3414.

From the above results, we can see that the Projected CRS is SVY21. Hence, we can assign the EPSG code using the following code chunk:

# 5. **spTransform() of sp package is used to assign EPSG code to the SpatialDataFrames. The epsg:3414 is the code for svy21.**

```{r}
childcare <-st_transform(childcare,
                        CRS("+init=epsg:3414"))
network <- st_transform(network,
                       CRS("+init=epsg:3414"))
```

To ask: Why this is not able to work:

`childcare <-spTransform(childcare, CRS("+init=epsg:3414"))`

`network <- spTransform(network, CRS("+init=epsg:3414"))`

```{r}

```

# 6. **Visualising Geosptial data using Base R**

```{r}
plot(network)
plot(childcare,add=T,col='red',pch = 19)
```

For achieving a visually appealing and interactive representation of geospatial data, the tmap package's mapping function can be employed

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
```

```{r}
tmap_mode('plot')
```

# 7. **Network Constrained KDE (NetKDE) Analysis provided in spNetwork**

## 7.1 Preparing the lixels objects

Prior to computing NetKDE, it is necessary to partition the SpatialLines object into lixels with a specified minimum distance. This operation can be accomplished using the lixelize_lines() function from the spNetwork package

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 350)
```

> [Notes on Lixelize_lines Function:]{.underline}
>
> -   Dimensions for Lixels Objects:
>
>     -   Set the length of a lixel (lx_length) to 700m.
>
>     -   Set the minimum length of a lixel (mindist) to 350m.
>
>     -   If the final lixel is shorter than the minimum length, it will be added to the previous lixel.
>
>     -   Segments that are already shorter than the minimum length are not modified.
>
>     -   If the minimum length is NULL, then mindist = maxdist/10.
>
> -   Additional Information about Lixelize_lines Function:
>
>     -   Lixelize_lines is used to cut a SpatialLines object into lixels with a specified minimal distance.
>
>     -   The function also supports multicore processing through lixelize_lines.mc().
>
> -   Post-cut Considerations:
>
>     -   After cutting, if the length of the final lixel is shorter than the minimum distance, it is added to the previous lixel.
>
>     -   If the minimum distance is NULL, then mindist is set to maxdist/10.
>
>     -   Segments that are already shorter than the minimum distance are not modified.

## 7.2 Generate line centre points using lines_center() of spNetwork

-   **Generate a SpatialPointsDataFrame with line center points.**

-   **Points are located at center of line** based on the length of the line.

```{r}
samples <- lines_center(lixels)
```

## 7.3 Performing NetKDE

To compute the NetKDE:

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1,nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

-   **Kernel Method and Arguments:**

    -   The code chunk reveals the use of the quartic kernel (kernel_name argument).

    -   spNetwork supports various kernel methods, including triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov, or uniform.

-   **Calculation Methods for NKDE:**

    -   The method argument indicates the use of the "simple" method for calculating NetKDE.

    -   spNetwork offers three methods for NKDE:

        -   **simple:** Distances between events and sampling points are replaced by network distances. The kernel formula is adjusted to calculate density over a linear unit instead of an areal unit.

        -   **discontinuous:** Proposed by Okabe et al. (2008), this method "divides" the mass density of an event at intersections of lixels.

        -   **continuous:** An alternative version proposed by Okabe et al. (2008) adjusts the density before intersections, making the function continuous.

-   **User Guide Reference:**

    -   The user guide of the spNetwork package provides a comprehensive discussion of nkde(). It is recommended to read the guide to understand various parameters for calibrating the NetKDE model.

-   **Additional Notes on Arguments:**

    -   The chosen kernel method is quartic, and the decision is explained.

    -   spNetwork supports alternative kernel methods such as triangle, gaussian, scaled gaussian, tricube, cosine, triweight, epanechnikov, or uniform.

    -   The selected method for NKDE calculation is "simple," and the reasons for its use are explained.

    -   Other supported methods include "discontinuous" and "continuous," each with specific characteristics described in the code chunk.

## 7.4 Visualising NetKDE

### 7.4.1 Insert the computed density values (i.e. densities) into samples and lixels objects as density field.

```{r}
samples$density <- densities
lixels$density <- densities
```

### 7.4.2 Resale the density values from number of events per meter to number of events per kilometer

As the svy21 projection system is in meters, the resulting density values are very small (e.g., 0.0000005). The code below employed to rescale the density values from the number of events per meter to the number of events per kilometer.

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

### 7.4.3 Using tmap package to plot map after rescaling

tmap packages can be used to prepare interactive and high cartographic quality map visualisation.

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

> [Notes:]{.underline}
>
> -   Road segments with relatively higher density of childcare centres (darker color)
>
> -   Road segments with relatively lower density of childcare centres (lighter color)

# 8. Network Constrained G- and K-Function Analysis

-   **Complete Spatial Randomness (CSR) Test:**

    -   Objective: Conducting CSR test using the kfunctions() function from the spNetwork package.

    -   Null Hypothesis (Ho): The observed spatial point events (i.e., distribution of childcare centres) exhibit a uniform distribution over a street network in Punggol Planning Area.

-   **CSR Test Assumption:**

    -   The CSR test relies on the assumption of a binomial point process.

    -   Assumption implies that childcare centres are randomly and independently distributed over the street network.

-   **Interpretation of Results:**

    -   If the null hypothesis is rejected:

        -   Inference: The distribution of childcare centres shows spatial interactions and dependence.

        -   Resultant Patterns: Nonrandom patterns may be observed.

-   **CSR Test Execution:**

    -   Execution involves utilizing the kfunctions() function from the spNetwork package.

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

-   **Insights from the Code Chunk:**

    -   The code chunk provides valuable insights into the utilization of the kfunctions() function.

-   **Arguments Used:**

    -   Ten arguments are employed in the code chunk, namely:

        -   lines: A SpatialLinesDataFrame with sampling points.

        -   points: A SpatialPointsDataFrame representing points on the network.

        -   start: Start value for evaluating the k and g functions.

        -   end: Last value for evaluating the k and g functions.

        -   step: Jump between two evaluations of the k and g functions.

        -   width: Width of each donut for the g-function.

        -   nsim: Number of Monte Carlo simulations (50 simulations in the example).

        -   resolution: Resolution for simulating random points on the network.

        -   conf_int: Width of the confidence interval (default = 0.05).

    -   For additional arguments, refer to the user guide of the spNetwork package.

-   **Output of kfunctions():**

    -   The function outputs a list with the following components:

        -   plotkA: ggplot2 object representing k-function values.

        -   plotgA: ggplot2 object representing g-function values.

        -   valuesA: DataFrame with values used to build the plots.

We can visualise the ggplot2 object of k-function by using the code chunk below.

```{r}
kfun_childcare$plotk
```

> -   **Observations from the Graph:**
>
>     -   The blue line indicates the empirical network K-function for childcare centers in Punggol.
>
>     -   A gray envelope represents results from 50 simulations spanning the 2.5% to 97.5% interval.
>
> -   **Inference:**
>
>     -   Blue line values between 250m-400m fall below the gray envelope.
>
> -   **Conclusion:**
>
>     -   Implies that childcare centers in Punggol exhibit a regular pattern within the 250m-400m distance range.

Kfunctions values:

```{r}
kfun_childcare$values
```
