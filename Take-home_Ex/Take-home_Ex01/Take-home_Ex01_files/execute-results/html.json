{
  "hash": "1d5ec23ae5975a199602d63e9b0e28ba",
  "result": {
    "markdown": "---\ntitle: \"Take home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore\"\ndate: \"January 2024\"\ndate-modified: \"2024-01-25\"\nexecute: \n  echo: true\n  eval: true\n  warning: false\neditor: visual\n---\n\n\nrmb always check for duplicates\n\n## **Objectives**\n\nGeospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical and spatio-temporal distribution of Grab hailing services locations in Singapore.\n\n## **The Task**\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer in sf tibble data.frames:\n\n    -   Grab taxi location points either by origins or destinations.\n\n    -   Road layer within Singapore excluding outer islands.\n\n    -   Singapore boundary layer excluding outer islands\n\n-   Using the extracted data, derive traditional Kernel Density Estimation layers. (Hands-on ex3:1st order)\n\n-   Using the extracted data, derive either Network Kernel Density Estimation (NKDE) or Temporal Network Kernel Density Estimation (TNKDE)\n\n-   Using appropriate **tmap** functions, display the kernel density layers on openstreetmap of Singapore.\n\n-   Describe the spatial patterns revealed by the kernel density maps.\n\n# **1. Import R packages**\n\nThe different R packages used:\n\n-   [arrow](https://arrow.apache.org/docs/r/) exposes an interface to the Arrow C++ library, enabling access to many of its features in R. For this in-class exercise, arrow will be used to read Parquet files into R environment.\n\n-   [lubridate](https://lubridate.tidyverse.org/), a member of tidyverse family. Lubridate makes it easier to do the things R does with date-times and possible to do the things R does not. If you are new to lubridate, the best place to start is the [Date and times](https://r4ds.hadley.nz/datetimes) chapter in R for data science.\n\n-   [tidyverse](https://www.tidyverse.org/), a family of R packages for doing Data Science work based on tidy framework,\n\n-   [tmap](https://r-tmap.github.io/tmap/), an R package specially designed for plotting cartographical quality maps based on Layered Gremmar of Graphics.\n\n-   [sf](https://r-spatial.github.io/sf/), an package that provides simple features access for R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(maptools, tidyverse, sf, raster, spatstat, tmap,lubridate, arrow, sp, dplyr)\n```\n:::\n\n\n# **2. The Data**\n\n### **Apstial data**\n\n-   For the purpose of this assignment, [Grab-Posisi](https://engineering.grab.com/grab-posisi) of Singapore will be used.\n\n### **Geospatial data**\n\n-   Road data set from OpenStreetMap of [Geofabrik download server](https://download.geofabrik.de/). The Malaysia, Singapore, and Brunei coverage should be downloaded.\n\n-   Master Plan 2019 Subzone Boundary (No Sea) from Data.gov.sg.\n\n# **3. Data preprocessing**\n\n## 3.1 Importing Aspatial Data\n\n### Importing Grab-Posisi Dataset\n\nIn this case we use **arrow** package *`read_parquet()`* function to import the following dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab <- read_parquet(\"data/apstial/GrabPosisi/part-00000.parquet\")\n```\n:::\n\n\nNow we will use glimpse() of dplyr package is used to display the structure of df tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(grab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,034,553\nColumns: 9\n$ trj_id        <chr> \"70014\", \"73573\", \"75567\", \"1410\", \"4354\", \"32630\", \"646…\n$ driving_mode  <chr> \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", \"car\", …\n$ osname        <chr> \"android\", \"android\", \"android\", \"android\", \"android\", \"…\n$ pingtimestamp <int> 1554943236, 1555582623, 1555141026, 1555731693, 15555844…\n$ rawlat        <dbl> 1.342326, 1.321781, 1.327088, 1.262482, 1.283799, 1.3003…\n$ rawlng        <dbl> 103.8890, 103.8564, 103.8613, 103.8238, 103.8072, 103.90…\n$ speed         <dbl> 18.910000, 17.719076, 14.021548, 13.026521, 14.812943, 2…\n$ bearing       <int> 248, 44, 34, 181, 93, 73, 82, 321, 324, 31, 203, 50, 252…\n$ accuracy      <dbl> 3.900, 4.000, 3.900, 4.000, 3.900, 3.900, 3.000, 3.649, …\n```\n:::\n:::\n\n\nNotice that pingtimestamp is in wrong data type format. It should be in date/ time format and not integer.\n\n## 3.2 Importing Geospatial data\n\n### Importing Master Plan 2019 Subzone Boundary (No Sea) from Data.gov.sg.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(\"data/geospatial/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Feliciaeng29\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 332\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <MULTIPOLYGON [°]> MULTIPOLYGON Z (((103.8145 ..., MULTIPOLYGON …\n```\n:::\n:::\n\n### Importing data for Road data from OpenStreetMap\n\nIn this case we will only be using road data??\n** To ask if we need road data or Bus or Mrt Only???\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_read(dsn = \"data/geospatial\", layer = \"gis_osm_roads_free_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `gis_osm_roads_free_1' from data source \n  `C:\\Feliciaeng29\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 1759836 features and 10 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 99.66041 ymin: 0.8021131 xmax: 119.2601 ymax: 7.514393\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n#### Selecting and cleaning relevant information\n\n#### Dropping z coordinates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_zm(road)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_zm(mpsz)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nif (any(!st_is_valid(mpsz))) {\n  mpsz <- st_make_valid(mpsz)\n}\n```\n:::\n\n\n### cannot st_union()\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- mpsz %>% \n  st_union()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(road)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nExplain the reason why as well might need to filter the openstreet map data to only Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_sg <- st_intersection(road, mpsz)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(road_sg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nsfc_GEOMETRY of length 332; first list element: List of 1\n $ : num [1:86, 1:2] 104 104 104 104 104 ...\n - attr(*, \"class\")= chr [1:3] \"XY\" \"POLYGON\" \"sfg\"\n```\n:::\n:::\n\n\n# Data preparation\n\n## Converting data type to date/time format\n\nSince pingtimestamp is in wrong data type format, we need to convert the data type of pingtimestamp from character to date-time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab$pingtimestamp <- as_datetime(grab$pingtimestamp)\n```\n:::\n\n\nSave the tidy data.frame into rds format for subsequent use. Save the reformatted df into a new rds file called part0.rds. Save the output into a sub-folder call rds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(grab, \"data/rds/part0.rds\")\n```\n:::\n\n\n# Task 1: Grab taxi location points either by origins or destinations.\n\n## 1.1 Extracting trips' origin locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- grab %>% \n  group_by(trj_id) %>% \n  arrange(pingtimestamp) %>% \n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\n## 1.2 Extracting trips' destination locations\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_df <- grab %>%\n  group_by(trj_id) %>%\n  arrange(desc(pingtimestamp)) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label=TRUE,\n                        abbr=TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nSaving data from future use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(origin_df, \"data/rds/origin_df.rds\")\nwrite_rds(destination_df, \"data/rds/destination_df.rds\")\n```\n:::\n\n\n### Importing the origin and destination data\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_df <- read_rds(\"data/rds/origin_df.rds\")\ndestination_df <- read_rds(\"data/rds/destination_df.rds\")\n```\n:::\n\n\n# **4. Data Preprocessing**\n\n## Aspatial Data\n\n### Convert Aspatial to Geospatial for GrabPosisi\n\nConvert origin_df into an sf tibble data.frame by using it’s location information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_sf <- st_as_sf(origin_df,\n                      coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_sf <- st_as_sf(destination_df,\n                      coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n### Visualising the data for Origin and Destination\n\n#### Visualising frequency distribution\n\nUse ggplot functions are used to reveal the distribution of origin trips by day of the week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=origin_df, \n       aes(x=weekday)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=destination_df, \n       aes(x=weekday)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n#### Visualising as Point Symbol Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(origin_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(destination_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## 4.2 Project Transformation\n\nFirst we can check the content of a simple feature data frame\n\nUsing st_geometry() The column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n:::\n:::\n\n\nWe can use this to double check if all the data is in projected coordinate system `SVY21`\n\nUsing glimpse() to find the basic feature information\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 332\nColumns: 3\n$ Name        <chr> \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description <chr> \"<center><table><tr><th colspan='2' align='center'><em>Att…\n$ geometry    <MULTIPOLYGON [°]> MULTIPOLYGON (((103.8143 1...., MULTIPOLYGON …\n```\n:::\n:::\n\n\nNow we would like to reveal complete information of a feature object using head() of Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.8013 ymin: 1.274155 xmax: 103.8532 ymax: 1.286506\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\nescription\n1     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_NO</th> <td>12</td> </tr><tr bgcolor=\"\"> <th>SUBZONE_N</th> <td>DEPOT ROAD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_C</th> <td>BMSZ12</td> </tr><tr bgcolor=\"\"> <th>CA_IND</th> <td>N</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PLN_AREA_N</th> <td>BUKIT MERAH</td> </tr><tr bgcolor=\"\"> <th>PLN_AREA_C</th> <td>BM</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>REGION_N</th> <td>CENTRAL REGION</td> </tr><tr bgcolor=\"\"> <th>REGION_C</th> <td>CR</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C22DED671DE2A940</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191223152313</td> </tr></table></center>\n2     <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_NO</th> <td>2</td> </tr><tr bgcolor=\"\"> <th>SUBZONE_N</th> <td>BUKIT MERAH</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_C</th> <td>BMSZ02</td> </tr><tr bgcolor=\"\"> <th>CA_IND</th> <td>N</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PLN_AREA_N</th> <td>BUKIT MERAH</td> </tr><tr bgcolor=\"\"> <th>PLN_AREA_C</th> <td>BM</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>REGION_N</th> <td>CENTRAL REGION</td> </tr><tr bgcolor=\"\"> <th>REGION_C</th> <td>CR</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>085EF219A5A1AEAD</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191223152313</td> </tr></table></center>\n3            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_NO</th> <td>3</td> </tr><tr bgcolor=\"\"> <th>SUBZONE_N</th> <td>CHINATOWN</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_C</th> <td>OTSZ03</td> </tr><tr bgcolor=\"\"> <th>CA_IND</th> <td>Y</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PLN_AREA_N</th> <td>OUTRAM</td> </tr><tr bgcolor=\"\"> <th>PLN_AREA_C</th> <td>OT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>REGION_N</th> <td>CENTRAL REGION</td> </tr><tr bgcolor=\"\"> <th>REGION_C</th> <td>CR</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>EF2B9A91AF49E025</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191223152313</td> </tr></table></center>\n4       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_NO</th> <td>4</td> </tr><tr bgcolor=\"\"> <th>SUBZONE_N</th> <td>PHILLIP</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_C</th> <td>DTSZ04</td> </tr><tr bgcolor=\"\"> <th>CA_IND</th> <td>Y</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PLN_AREA_N</th> <td>DOWNTOWN CORE</td> </tr><tr bgcolor=\"\"> <th>PLN_AREA_C</th> <td>DT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>REGION_N</th> <td>CENTRAL REGION</td> </tr><tr bgcolor=\"\"> <th>REGION_C</th> <td>CR</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>615D4EDDEF809F8E</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191223152313</td> </tr></table></center>\n5 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_NO</th> <td>5</td> </tr><tr bgcolor=\"\"> <th>SUBZONE_N</th> <td>RAFFLES PLACE</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>SUBZONE_C</th> <td>DTSZ05</td> </tr><tr bgcolor=\"\"> <th>CA_IND</th> <td>Y</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PLN_AREA_N</th> <td>DOWNTOWN CORE</td> </tr><tr bgcolor=\"\"> <th>PLN_AREA_C</th> <td>DT</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>REGION_N</th> <td>CENTRAL REGION</td> </tr><tr bgcolor=\"\"> <th>REGION_C</th> <td>CR</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>72107B11807074F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20191223152313</td> </tr></table></center>\n                        geometry\n1 MULTIPOLYGON (((103.8143 1....\n2 MULTIPOLYGON (((103.8221 1....\n3 MULTIPOLYGON (((103.8436 1....\n4 MULTIPOLYGON (((103.8496 1....\n5 MULTIPOLYGON (((103.8524 1....\n```\n:::\n:::\n\n\nNow let's take visualise the geospatial feature using plot() function to know what we are looking at\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nBefore, we proceed lets use double check and make sure that all the data are projected in the same projection system.\n\nWe can do so using st_crs() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(origin_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System: NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(destination_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System: NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(grab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System: NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_sf <- st_as_sf(grab,\n                      coords = c(\"rawlng\", \"rawlat\"),\n                      crs = 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nSet the coordinate reference system (CRS) to Svy21 (EPSG 3414)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(grab_sf) <- 3414\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n:::\n\n\nPlot the dots for the grab data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(grab_sf) +\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\nWe notice that the data is SVY21 and need to change it to WGS84\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_transform(mpsz, crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_zm(mpsz)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road_sg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\nWe notice that it is in svy21 and need to convert it to wgs84\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_transform(road_sg, crs = 3414)\n```\n:::\n\n\n***To be done after I filter the data, damn long:\ntm_shape(road)+\n  tm_lines()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(road_sg)+\n  tm_lines()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nmapping it all together\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(grab_sf) +\n  tm_dots() +\ntm_shape(mpsz) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n# Mapping the geospatial data sets\n\nAfter we check the geospatial data set, we can plot a map to show the spatial patterns\n\ntmap_mode(\"plot\")\ntm_shape(origin_sf) +\n  tm_dots() +\ntmap_mode(\"plot\")\ntm_shape(destination_sf) +\n  tm_dots() +\ntm_shape(mpsz) +\n  tm_polygons() +\ntm_shape(road_sg)+\n  tm_lines()\n\n\n::: {.cell}\n\n:::\n\n\n# Geospatial Data Wrangling\n\n## Converting sf data frames to sp’s Spatial* class\n\n\n::: {.cell}\n\n:::\n\n\nNow, we will display the information about these 3 Spatial* class\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Converting the Spatial* class into generic sp format\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Converting the generic sp format into spatstat’s ppp format\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nNow let's plot and check the summary statistics\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Handling duplicated points\n\n\n::: {.cell}\n\n:::\n\n\n## Overcoming the duplicates problem\n\n### Jittering\n\n\n::: {.cell}\n\n:::\n\n\n## Creating an owin object\n\n\n::: {.cell}\n\n:::\n\n\n# Combining point events object and owin object\n\n\n::: {.cell}\n\n:::\n\n\nNow let's take a look at the output\n\n\n::: {.cell}\n\n:::\n\n\n# First-order Spatial Point Patterns Analysis\n\n## Kernel Density Estimation\n\n###  Computing kernel density estimation using automatic bandwidth selection method\n\n\n::: {.cell}\n\n:::\n\n\n### Working with different automatic Bandwidth methods\n\n\n::: {.cell}\n\n:::\n\n\n### Working with different kernel methods\n\n\n\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}