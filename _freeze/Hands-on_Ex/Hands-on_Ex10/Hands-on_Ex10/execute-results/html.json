{
  "hash": "884834d2c6c6f6647d6d1df0bd9a3f3f",
  "result": {
    "markdown": "---\ntitle: \"Hands on Exercise 10\"\nexecute: \n  warning: false\n  eval: true\n  echo: true\n  freeze: true\ndate: \"23 March, 2024\"\ndate-modified: \"last-modified\"\n---\n\n\n\n\n\n# Introduction\nIn this hands-on exercise, you will gain hands-on experience on how to model geographical accessibility by using R’s geospatial analysis packages.\n\n# Learning Outcome\nBy the end of this hands-on exercise, you will be able:\n\nto import GIS polygon data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\nto import aspatial data into R and save them as simple feature data frame by using appropriate functions of sf package of R;\nto computer accessibility measure by using Hansen’s potential model and Spatial Accessibility Measure (SAM); and\nto visualise the accessibility measures by using tmap and ggplot2 packages.\n\n# The data\nFour data sets will be used in this hands-on exercise, they are:\n\nMP14_SUBZONE_NO_SEA_PL: URA Master Plan 2014 subzone boundary GIS data. This data set is downloaded from data.gov.sg.\n\nhexagons: A 250m radius hexagons GIS data. This data set was created by using st_make_grid() of sf package. It is in ESRI shapefile format.\n\nELDERCARE: GIS data showing location of eldercare service. This data is downloaded from data.gov.sg. There are two versions. One in ESRI shapefile format. The other one in Google kml file format. For the purpose of this hands-on exercise, ESRI shapefile format is provided.\n\nOD_Matrix: a distance matrix in csv format. There are six fields in the data file. They are:\n\norigin_id: the unique id values of the origin (i.e. fid of hexagon data set.),\ndestination_id: the unique id values of the destination (i.e. fid of ELDERCARE data set.),\nentry_cost: the perpendicular distance between the origins and the nearest road),\nnetwork_cost: the actual network distance from the origin and destination,\nexit_cost: the perpendicular distance between the destination and the nearest road), and\ntotal_cost: the summation of entry_cost, network_cost and exit_cost.\nAll the values of the cost related fields are in metres.\n\nReminder: Except MP14_SUBZONE_NO_SEA_PL data set, the other three data set are specially prepared by Prof. Kam for teaching and research purpose. Students taking IS415 Geospatial Analytics and Applications are allowed to use them for hands-on exercise purpose. Please obtain formal approval from Prof. Kam if you want to use them for other courses or usage.\n\n# Getting Started\nBefore we getting started, it is important for us to install the necessary R packages and launch them into RStudio environment.\n\nThe R packages need for this exercise are as follows:\n\nSpatial data handling: sf\nModelling geographical accessibility: spatialAcc\nAttribute data handling: tidyverse, especially readr and dplyr\nthematic mapping: tmap\nStatistical graphic: ggplot2\nStatistical analysis: ggstatsplot\nThe code chunk below installs and launches these R packages into RStudio environment.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\npackage 'SpatialAcc' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\felie\\AppData\\Local\\Temp\\RtmpuUmcb1\\downloaded_packages\n```\n:::\n:::\n\n\n\nNotice that with tidyverse, we do not have to install readr, dplyr and ggplots packages separately. In fact, tidyverse also installs other R packages such as tidyr, stringr, forcats, tibble, purrr and magrittr.\n\n# Geospatial Data Wrangling\n\n## Importing geospatial data\n\nThree geospatial data will be imported from the data/geospatial sub-folder. They are MP14_SUBZONE_NO_SEA_PL, hexagons and ELDERCARE.\n\nThe code chunk below is used to import these three data sets shapefile by using st_read() of sf packages.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_NO_SEA_PL' from data source \n  `C:\\Feliciaeng29\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `hexagons' from data source \n  `C:\\Feliciaeng29\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3125 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 21506.33 xmax: 50010.26 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `ELDERCARE' from data source \n  `C:\\Feliciaeng29\\IS415-GAA\\Hands-on_Ex\\Hands-on_Ex10\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 120 features and 19 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21 / Singapore TM\n```\n:::\n:::\n\n\n## Updating CRS information\nThe code chunk below updates the newly imported mpsz with the correct ESPG code (i.e. 3414)\n\n\n::: {.cell}\n\n:::\n\n\n\nAfter transforming the projection metadata, you can verify the projection of the newly transformed mpsz_svy21 by using st_crs() of sf package.\n\nThe code chunk below will be used to varify the newly transformed mpsz_svy21.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\nNotice that the EPSG: is indicated as 3414 now.\n\n## Cleaning and updating attribute fields of the geospatial data\n\nThere are many redundant fields in the data tables of both eldercare and hexagons. The code chunks below will be used to exclude those redundant fields. At the same time, a new field called demand and a new field called capacity will be added into the data table of hexagons and eldercare sf data frame respectively. Both fields are derive using mutate() of dplyr package.\n\n\n::: {.cell}\n\n:::\n\n\nNotice that for the purpose of this hands-on exercise, a constant value of 100 is used. In practice, actual demand of the hexagon and capacity of the eldercare centre should be used.\n\n# Aspatial Data Handling and Wrangling\n\n## Importing Distance Matrix\n\nThe code chunk below uses read_cvs() of readr package to import OD_Matrix.csv into RStudio. The imported object is a tibble data.frame called ODMatrix.\n\n\n::: {.cell}\n\n:::\n\n\n## Tidying distance matrix\n\nThe code chunk below uses spread() of tidyr package is used to transform the O-D matrix from a thin format into a fat format.\n\n\n::: {.cell}\n\n:::\n\n\nNote: Since tidyr version 1.0 a new function called pivot_wider() is introduce. You should use pivot_wider() instead of spread()\n\nCurrently, the distance is measured in metre because SVY21 projected coordinate system is used. The code chunk below will be used to convert the unit f measurement from metre to kilometre.\n\n\n::: {.cell}\n\n:::\n\n\n# Modelling and Visualising Accessibility using Hansen Method\n\n## Computing Hansen’s accessibility\n\nNow, we ready to compute Hansen’s accessibility by using ac() of SpatialAcc package. Before getting started, you are encourage to read the arguments of the function at least once in order to ensure that the required inputs are available.\n\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_Handsen.\n\n\n::: {.cell}\n\n:::\n\n\n\nThe default field name is very messy, we will rename it to accHansen by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\nNotice that the field name is much more tidier now.\n\n\nNext, we will convert the data table into tibble format by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\nLastly, bind_cols() of dplyr will be used to join the acc_Hansen tibble data frame with the hexagons simple feature data frame. The output is called hexagon_Hansen.\n\n\n::: {.cell}\n\n:::\n\n\nNotice that hexagon_Hansen is a simple feature data frame and not a typical tibble data frame.\n\nActually, the steps above can be perform by using a single code chunk as shown below.\n\n\n::: {.cell}\n\n:::\n\n\n## Visualising Hansen’s accessibility\n\n### Extracting map extend\n\nFirstly, we will extract the extend of hexagons simple feature data frame by by using st_bbox() of sf package.\n\n\n::: {.cell}\n\n:::\n\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## Statistical graphic visualisation\n\nIn this section, we are going to compare the distribution of Hansen’s accessibility values by URA Planning Region.\n\nFirstly, we need to add the planning region field into haxegon_Hansen simple feature data frame by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n# Modelling and Visualising Accessibility using KD2SFCA Method\n\n## Computing KD2SFCA’s accessibility\n\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_KD2SFCA. Notice that KD2SFCA is used for family argument.\n\n\n::: {.cell}\n\n:::\n\n\n## Visualising KD2SFCA’s accessibility\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n## Statistical graphic visualisation\n\nNow, we are going to compare the distribution of KD2CFA accessibility values by URA Planning Region.\n\nFirstly, we need to add the planning region field into hexagon_KD2SFCA simple feature data frame by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n# Modelling and Visualising Accessibility using Spatial Accessibility Measure (SAM) Method\n\n## Computing SAM accessibility\n\nIn this section, you are going to repeat most of the steps you had learned in previous section to perform the analysis. However, some of the codes will be combined into one code chunk.\nThe code chunk below calculates Hansen’s accessibility using ac() of SpatialAcc and data.frame() is used to save the output in a data frame called acc_SAM. Notice that SAM is used for family argument.\n\n\n::: {.cell}\n\n:::\n\n\n## Visualising SAM’s accessibility\n\nThe code chunk below uses a collection of mapping fucntions of tmap package to create a high cartographic quality accessibility to eldercare centre in Singapore. Notice that mapex is reused for bbox argument.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Statistical graphic visualisation\n\nNow, we are going to compare the distribution of SAM accessibility values by URA Planning Region.\n\nFirstly, we need to add the planning region field into hexagon_SAM simple feature data frame by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\nNext, ggplot() will be used to plot the distribution by using boxplot graphical method.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex10_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex10_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}